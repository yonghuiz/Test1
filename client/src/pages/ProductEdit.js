/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5cc27f4b674981322641aa1a
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";

// Custom Actions


// START IMPORT ACTIONS
import ProductActions from "../redux/actions/ProductActions";

// END IMPORT ACTIONS

/** APIs

* actionsProduct.create
*	@description CRUD ACTION create
*
* actionsProduct.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsProduct.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*

**/

class ProductEdit extends Component {
  // Init product
  constructor(props) {
    super(props);
    this.state = {
      product: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsProduct.loadProduct(this.props.match.params.id);
    }
    
  }

  // Insert props product in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      product: props.product
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.product._id) {
      this.props.actionsProduct.saveProduct(this.state.product).then(data => {
        this.props.history.push("/products/");
      });
    } else {
      this.props.actionsProduct.createProduct(this.state.product).then(data => {
        this.props.history.push("/products/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Product Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="Desc"
            label="Desc"
            value={this.state.product.Desc || ""}
            onChange={Utils.handleChange.bind(this, "product")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="Name"
            label="Name"
            value={this.state.product.Name || ""}
            onChange={Utils.handleChange.bind(this, "product")}
            margin="normal"
            fullWidth
          />
          
          
          <TextField
            id="UOM"
            label="UOM"
            value={this.state.product.UOM || ""}
            onChange={Utils.handleChange.bind(this, "product")}
            margin="normal"
            fullWidth
          />
          

          {/* Footer */}
          <div className="footer-card">
            <Link to="/products/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsProduct: bindActionCreators(ProductActions, dispatch),
  };
};

// Validate types
ProductEdit.propTypes = { 
  actionsProduct: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    product: state.ProductEditReducer.product
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ProductEdit);
